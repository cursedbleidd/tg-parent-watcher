stages:
  - lint
  - build-push
  - deploy

.deps:
  image: node:20-alpine
  before_script: &npm_install
    - yarn

.ssh_defaults:
  image: kroniak/ssh-client
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $REMOTE_PORT $REMOTE_HOST >> ~/.ssh/known_hosts
    - chmod 664 ~/.ssh/known_hosts  

lint_job:
  stage: lint
  extends:
    - .deps
  script:
    - yarn lint

build-push:
  stage: build-push
  needs: [lint_job]
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: manual
  image: docker:20.10
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
  services:
    - docker:20.10.16-dind
  before_script:
    - export IMAGE=$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - time docker build -t $IMAGE -f Docker/Dockerfile .
    - docker push $IMAGE

deploy:
  stage: deploy
  needs: [build-push]    
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: manual
  extends: .ssh_defaults    
  script:
    - echo "IMAGE_VERSION=$CI_COMMIT_TAG" > .env
    - ssh $REMOTE_USER@$REMOTE_HOST -p $REMOTE_PORT rm -fr $REMOTE_FOLDER
    - ssh $REMOTE_USER@$REMOTE_HOST -p $REMOTE_PORT mkdir -p $REMOTE_FOLDER
    - ssh $REMOTE_USER@$REMOTE_HOST -p $REMOTE_PORT mkdir -p $REMOTE_FOLDER/Docker
    - scp -P $REMOTE_PORT "Docker/docker-compose.yml" $REMOTE_USER@$REMOTE_HOST:$REMOTE_FOLDER/Docker/docker-compose.yml
    - scp -P $REMOTE_PORT ".env" $REMOTE_USER@$REMOTE_HOST:$REMOTE_FOLDER/.env
    - ssh $REMOTE_USER@$REMOTE_HOST -p $REMOTE_PORT docker compose --env-file .env -f $REMOTE_FOLDER/Docker/docker-compose.yml up -d
    - ssh $REMOTE_USER@$REMOTE_HOST -p $REMOTE_PORT rm $REMOTE_FOLDER/.env
